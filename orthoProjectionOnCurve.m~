function tc = orthoProjectionOnCurve(x0, y0, X, Y, dXdt, dYdt, eps)

format long;
f = @(t) (((X(t)-x0)^2)+((Y(t)-y0)^2)); % square of distance function
dfdt = @(t) ((X(t)-x0)*dXdt(t))+((Y(t)-y0)*dYdt(t)); % first derivative of f
    % Finding the double derivative of f
syms t
d2fdt2 = diff(((X(t)-x0)*dXdt(t))+((Y(t)-y0)*dYdt(t)),1);
d2fdt2 = matlabFunction(d2fdt2); % second derivative of f
%gradient descent
smallest=power(10,10);
tc=0;
t_corr=0;
alpha=0.001;
 
  for i=[1:1000]
      t_trial=rand;
      no_iter=0;
      change = 1;
      while no_iter<power(10,3) && change > power(10,-14)
          loss = f(t_trial);
          update = 2*dfdt(t_trial);
          t_trial = t_trial - alpha*update;
          change=abs(alpha*update);
          no_iter = no_iter+1;
      end
      if smallest > loss
          t_corr=t_trial;
          smallest=loss;
      end
      tc=t_corr;
  end
  
  t=t_corr;
  no_iter=0;
  change=power(10,10);
  while no_iter<power(10,4) && change > power(10,-14)


%  for i=1:1000
%          
%          ta(1) = t_corr; %Randomizing the initial point for the Newton's method
%          m = 1;
%          while(abs(dfdt(ta(m))) > eps) %Iterating for Newton's method.
%              % abs(dfdt(ta(m))) > eps so that the first derivative of f is 
%              % as close to zero as possible. That is by making it as small
%              % as eps (error)
%              % Applying Newton's Method on the first derivative of f
%              ta(m+1) = ta(m) - (dfdt(ta(m))/d2fdt2(ta(m))); % Newton's method
%              m = m + 1;
%          end
%          tcf(i) = ta(m); % Set of points where f is optimum
%          D(i) = (f(tcf(i))); % Set of points where square of f is optimum
%      end
%      [minD,I] = min(D); % Taking the minimum square of distance D
%  %disp(minD);
%  tc = tcf(I); % The required t at which f is minimum
%  end
     

